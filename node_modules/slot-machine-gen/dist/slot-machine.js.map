{"version":3,"sources":["../src/slot-machine.js"],"names":["SlotMachine","container","reels","callback","options","self","REEL_SEGMENT_TOTAL","defaults","reelHeight","reelWidth","reelOffset","slotYAxis","animSpeed","sounds","reelsBegin","reelsEnd","rngFunc","Math","random","Object","assign","length","initGame","Error","createDisplayElm","createSlotElm","div","document","createElement","classList","add","i","elm","style","transform","appendChild","addEventListener","spinReels","forEach","createReelElm","reel","symbols","position","config","startPos","createStripElm","stripHeight","getStripHeight","stripWidth","getStripWidth","segmentDeg","transZ","trunc","tan","PI","marginTop","ul","height","width","li","append","toString","imgPosY","getImagePosY","rotateX","background","imageSrc","selectRandSymbol","totalWeight","symbolTotal","symbol","weight","randNum","getRandom","j","payLine","push","Array","prototype","apply","arguments","timer","window","setTimeout","isAnimating","clearTimeout","playSound","selected","element","remove","toggle","childNodes","index","backgroundPositionY","replace","getRandomInt","min","max","minNum","ceil","maxNum","floor","abs","url","audio","Audio","src","onerror","console","warn","play","dispatch","func","call","slotMachine","module","exports"],"mappings":"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","file":"slot-machine.js","sourcesContent":["/**\n *  Slot Machine Generator\n *  Create an extremely biased, web-based slot machine game.\n *\n *  Copyright 2020, Marc S. Brooks (https://mbrooks.info)\n *  Licensed under the MIT license:\n *  http://www.opensource.org/licenses/mit-license.php\n */\n\n'use strict';\n\n/**\n * @param {Element} container\n *   Containing HTML element.\n *\n * @param {Array<Object>} reels\n *   Reel configuration.\n *\n * @param {Function} callback\n *   Returns selected pay-line symbols.\n *\n * @param {Object} options\n *   Configuration overrides (optional).\n */\nfunction SlotMachine(container, reels, callback, options) {\n  const self = this;\n\n  const REEL_SEGMENT_TOTAL = 24;\n\n  const defaults = {\n    reelHeight: 1200,\n    reelWidth:  200,\n    reelOffset: 20,\n    slotYAxis: 0,\n    animSpeed:  1000,\n    sounds: {\n      reelsBegin: null,\n      reelsEnd: null\n    },\n    rngFunc: function() {\n\n      // The weakest link.\n      return Math.random();\n    },\n  };\n\n  (function() {\n    self.options = Object.assign(defaults, options);\n\n    if (reels.length > 0) {\n      initGame();\n    } else {\n      throw new Error('Failed to initialize (missing reels)');\n    }\n  })();\n\n  /**\n   * Initialize a new game instance.\n   */\n  function initGame() {\n    createDisplayElm();\n    createSlotElm();\n  }\n\n  /**\n   * Create display elements.\n   */\n  function createDisplayElm() {\n    const div = document.createElement('div');\n    div.classList.add('display');\n\n    for (let i = 0; i < reels.length; i++) {\n      const elm = document.createElement('div');\n      elm.style.transform = `rotateY(${self.options.slotYAxis}deg)`;\n      elm.classList.add('reel');\n\n      div.appendChild(elm);\n    }\n\n    div.addEventListener('click', () => spinReels());\n\n    container.appendChild(div);\n  }\n\n  /**\n   * Create slot elements.\n   */\n  function createSlotElm() {\n    const div = document.createElement('div');\n    div.classList.add('slots');\n\n    reels.forEach(reel => {\n      const elm = createReelElm(reel, reel.symbols[0].position);\n\n      div.appendChild(elm);\n    });\n\n    container.appendChild(div);\n  }\n\n  /**\n   * Create reel elements.\n   *\n   * @param {Object} config\n   *   Config options.\n   *\n   * @param {Number} startPos\n   *   Start position.\n   *\n   * @return {Element}\n   */\n  function createReelElm(config, startPos = 0) {\n    const div = document.createElement('div');\n    div.style.transform = `rotateY(${self.options.slotYAxis}deg)`;\n    div.classList.add('reel');\n\n    const elm = createStripElm(config, config.symbols[0].position);\n\n    config['element'] = elm;\n\n    div.appendChild(elm);\n\n    return div;\n  }\n\n  /**\n   * Create strip elements (faux-panoramic animation).\n   *\n   * @param {Object} config\n   *   Config options.\n   *\n   * @param {Number} startPos\n   *   Start position.\n   *\n   * @return {Element}\n   */\n  function createStripElm(config, startPos = 0) {\n    const stripHeight = getStripHeight();\n    const stripWidth  = getStripWidth();\n\n    const segmentDeg = 360 / REEL_SEGMENT_TOTAL;\n\n    const transZ = Math.trunc(\n      Math.tan(90 / Math.PI - segmentDeg) * (stripHeight * 0.5) * 4\n    );\n\n    const marginTop = transZ + stripHeight / 2;\n\n    const ul = document.createElement('ul');\n    ul.style.height    = stripHeight + 'px';\n    ul.style.marginTop = marginTop   + 'px';\n    ul.style.width     = stripWidth  + 'px';\n    ul.classList.add('strip');\n\n    for (let i = 0; i < REEL_SEGMENT_TOTAL; i++) {\n      const li = document.createElement('li');\n      li.append(i.toString());\n\n      const imgPosY = getImagePosY(i, startPos);\n      const rotateX = (REEL_SEGMENT_TOTAL * segmentDeg) - (i * segmentDeg);\n\n      // Position image per the strip angle/container radius.\n      li.style.background = `url(${config.imageSrc}) 0 ${imgPosY}px`;\n      li.style.height     = stripHeight + 'px';\n      li.style.width      = stripWidth  + 'px';\n      li.style.transform  = `rotateX(${rotateX}deg) translateZ(${transZ}px)`;\n\n      ul.appendChild(li);\n    }\n\n    return ul;\n  }\n\n  /**\n   * Select a random symbol by weight.\n   *\n   * @param {Array<Object>} symbols\n   *   List of symbols.\n   *\n   * @return {Object}\n   */\n  function selectRandSymbol(symbols) {\n    let totalWeight = 0;\n\n    const symbolTotal = symbols.length;\n\n    for (let i = 0; i < symbolTotal; i++) {\n      const symbol = symbols[i];\n      const weight = symbol.weight;\n\n      totalWeight += weight;\n    }\n\n    let randNum = getRandom() * totalWeight;\n\n    for (let j = 0; j < symbolTotal; j++) {\n      const symbol = symbols[j];\n      const weight = symbol.weight;\n\n      if (randNum < weight) {\n        return symbol;\n      }\n\n      randNum -= weight;\n    }\n  }\n\n  /**\n   * Spin the reels and try your luck.\n   */\n  function spinReels() {\n    const payLine = [];\n\n    if (callback) {\n\n      // Delay callback until animations have stopped.\n      payLine.push = function() {\n        Array.prototype.push.apply(this, arguments);\n\n        if (payLine.length === reels.length) {\n          const timer = window.setTimeout(() => {\n            self.isAnimating = false;\n\n            callback(payLine);\n\n            window.clearTimeout(timer);\n          }, self.options.animSpeed);\n        }\n      };\n    }\n\n    playSound(self.options.sounds.reelsBegin);\n\n    reels.forEach(reel => {\n      const selected = selectRandSymbol(reel.symbols);\n      const startPos = selected.position;\n\n      // Start the rotation animation.\n      const elm = reel.element;\n      elm.classList.remove('stop');\n      elm.classList.toggle('spin');\n\n      // Shift images to select position.\n      elm.childNodes.forEach((li, index) => {\n        li.style.backgroundPositionY = getImagePosY(index, startPos) + 'px';\n      });\n\n      // Randomly stop rotation animation.\n      const timer = window.setTimeout(() => {\n        elm.classList.replace('spin', 'stop');\n\n        playSound(self.options.sounds.reelsEnd);\n\n        payLine.push(selected);\n\n        window.clearTimeout(timer);\n      }, self.options.animSpeed * getRandomInt(1, 4));\n    });\n  }\n\n  /**\n   * Get random number between 0 (inclusive) and 1 (exclusive).\n   *\n   * @return {number}\n   */\n  function getRandom() {\n    return self.options.rngFunc();\n  }\n\n  /**\n   * Get random integer between two values.\n   *\n   * @param {Number} min\n   *   Minimum value (default: 0).\n   *\n   * @param {Number} max\n   *   Maximum value (default: 10).\n   *\n   * @return {Number}\n   */\n  function getRandomInt(min = 1, max = 10) {\n    const minNum = Math.ceil(min);\n    const maxNum = Math.floor(max);\n\n    return Math.floor(getRandom() * (Math.floor(maxNum) - minNum)) + minNum;\n  }\n\n  /**\n   * Calculate the strip background position.\n   *\n   * @param {Number} index\n   *   Strip symbol index.\n   *\n   * @param {Number} position\n   *   Strip target position.\n   *\n   * @return {Number}\n   */\n  function getImagePosY(index, position) {\n    return -Math.abs(\n      (getStripHeight() * index) + (position - self.options.reelOffset)\n    );\n  }\n\n  /**\n   * Calculate the strip height.\n   *\n   * @return {Number}\n   */\n  function getStripHeight() {\n    return self.options.reelHeight / REEL_SEGMENT_TOTAL;\n  }\n\n  /**\n   * Calculate the strip width.\n   *\n   * @return {Number}\n   */\n  function getStripWidth() {\n    return self.options.reelWidth;\n  }\n\n  /**\n   * Play the audio clip.\n   *\n   * @param {String} url\n   *  Audio file URL.\n   */\n  function playSound(url) {\n    if (url) {\n      const audio = new Audio();\n      audio.src = url;\n      audio.onerror = () => console.warn(`Failed to load audio: ${url}`);\n      audio.play();\n    }\n  }\n\n  /**\n   * Dispatch game actions.\n   *\n   * @param {Function} func\n   *   Function to execute.\n   */\n  function dispatch(func) {\n    if (!self.isAnimating) {\n      self.isAnimating = true;\n\n      func.call(self);\n    }\n  }\n\n  /**\n   * Protected members.\n   */\n  this.play = function() {\n    dispatch(spinReels);\n  };\n}\n\n/**\n * Set global/exportable instance, where supported.\n */\nwindow.slotMachine = function(container, reels, callback, options) {\n  return new SlotMachine(container, reels, callback, options);\n};\n\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = SlotMachine;\n}\n"]}